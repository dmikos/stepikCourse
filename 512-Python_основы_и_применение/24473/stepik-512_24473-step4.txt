Вам дано описание наследования классов в формате JSON.
Описание представляет из себя массив JSON-объектов, которые соответствуют классам. У каждого JSON-объекта есть поле name,
которое содержит имя класса, и поле parents, которое содержит список имен прямых предков.

Пример:
[{"name": "A", "parents": []}, {"name": "B", "parents": ["A", "C"]}, {"name": "C", "parents": ["A"]}]

﻿Эквивалент на Python:
class A:
    pass

class B(A, C):
    pass

class C(A):
    pass


Гарантируется, что никакой класс не наследуется от себя явно или косвенно, и что никакой класс не наследуется явно от одного
класса более одного раза.

Для каждого класса вычислите предком скольких классов он является и выведите эту информацию в следующем формате.
<имя класса> : <количество потомков>

Выводить классы следует в лексикографическом порядке.

Sample Input:
[{"name": "A", "parents": []}, {"name": "B", "parents": ["A", "C"]}, {"name": "C", "parents": ["A"]}]

Sample Output:
A : 3
B : 1
C : 2
- - -
второй тест:

[
  {"name": "kvrwxkmqfy", "parents": ["zemrehxvuo", "qzntzflodp", "pjvisgmdrw"]},
  {"name": "ogqoyccgkn", "parents": ["ppcmlxqgmn", "titthqeskb"]},
  {"name": "uhfdrfrhzx", "parents": ["ogqoyccgkn", "ppcmlxqgmn", "wubwjzolrx", "pjvisgmdrw", "titthqeskb"]},
  {"name": "zemrehxvuo", "parents": ["uhfdrfrhzx", "wubwjzolrx", "pjvisgmdrw", "titthqeskb"]},
  {"name": "ppcmlxqgmn", "parents": ["pjvisgmdrw", "thceozowkb"]},
  {"name": "qzntzflodp", "parents": ["wubwjzolrx", "titthqeskb", "thceozowkb"]},
  {"name": "wubwjzolrx", "parents": []},
  {"name": "pjvisgmdrw", "parents": []},
  {"name": "titthqeskb", "parents": ["wubwjzolrx", "pjvisgmdrw"]},
  {"name": "thceozowkb", "parents": ["pjvisgmdrw", "titthqeskb"]}
]


ответы:

kvrwxkmqfy : 1
ogqoyccgkn : 4
pjvisgmdrw : 9
ppcmlxqgmn : 5
qzntzflodp : 2
thceozowkb : 7
titthqeskb : 8
uhfdrfrhzx : 3
wubwjzolrx : 9
zemrehxvuo : 2
- - -
Уместилось в 20 строк, решение прошло с 1 раза. Удобно будет реализовать словарь вида 'родитель' : [потомки], а затем
присмотреться к списковому методу extend внутри цикла или рекурсии.
- - -
http://eddmann.com/posts/depth-first-search-and-breadth-first-search-in-python/

Просто оставлю это тут.

С первого раза все сработало.
- - -

